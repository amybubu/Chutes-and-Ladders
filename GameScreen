import java.awt.Color;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

public class GameScreen extends JPanel implements ActionListener,
		MouseListener, MouseMotionListener, KeyListener {

	// background
	String screen = "Map.png";
	JLabel background2;

	public EndScreen end;

	JFrame f;

	String[] diePics = { "Dice1.png", "Dice2.png", "Dice3.png", "Dice4.png",
			"Dice5.png", "Dice6.png" };
	JLabel diePicture;

	int turn = 1;

	BlueCharacter blue = new BlueCharacter("BlueChar.png", 50, 50, 10, 890, 1);
	PinkCharacter pink = new PinkCharacter("PinkChar.png", 50, 50, 55, 890, 1);
	PurpleCharacter purple = new PurpleCharacter("PurpleChar.png", 50, 50, 10,
			935, 1);
	YellowCharacter yellow = new YellowCharacter("YellowChar.png", 50, 50, 55,
			935, 1);

	Character charac = new Character("", 0, 0, 0, 0, 0);
	Dice die = new Dice(diePics[0]);
	Dice die2[] = new Dice[6];

	ArrayList<Coordinates> coordinates = new ArrayList<Coordinates>();

	public GameScreen() {

		// ladders
		coordinates.add(new Coordinates(2, 38));
		coordinates.add(new Coordinates(4, 14));
		coordinates.add(new Coordinates(9, 31));
		coordinates.add(new Coordinates(21, 42));
		coordinates.add(new Coordinates(36, 58));
		coordinates.add(new Coordinates(28, 84));
		coordinates.add(new Coordinates(51, 67));
		coordinates.add(new Coordinates(71, 92));
		coordinates.add(new Coordinates(80, 98));

		// chutes
		coordinates.add(new Coordinates(24, 7));
		coordinates.add(new Coordinates(37, 26));
		coordinates.add(new Coordinates(99, 12));
		coordinates.add(new Coordinates(63, 60));
		coordinates.add(new Coordinates(73, 50));
		coordinates.add(new Coordinates(93, 75));
		coordinates.add(new Coordinates(94, 85));

		f = new JFrame();
		f.setSize(1006, 1029);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.getContentPane().setBackground(Color.black);
		f.setResizable(false);
		f.setLayout(null);

		String src = new File("").getAbsolutePath() + "/src/"; // path to image
		// setup
		ImageIcon backscreen = new ImageIcon(src + screen);

		die.rollDice();

		ImageIcon dieP = new ImageIcon(src + diePics);
		diePicture = new JLabel(dieP);
		diePicture.setBounds(die.getX(), die.getY(), 100, 100);
		for (int i = 0; i < diePics.length; i++) {
			die2[i] = new Dice(diePics[i]);
			die2[i].setRolled(i + 1);
			f.add(die2[i].getImg());
		}

		System.out.println(die.getNum());

		f.add(blue.getImg());
		f.add(pink.getImg());
		f.add(purple.getImg());
		f.add(yellow.getImg());

		background2 = new JLabel(backscreen);
		background2.setBounds(0, 0, 1000, 1000);

		f.addMouseListener(this);
		f.addKeyListener(this);
		f.addMouseMotionListener(this);

		f.add(background2);

		t = new Timer(16, this);
		t.start();
		f.setVisible(true);

	}

	public void update() {

	}

	Timer t;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		update();
	}

	@Override
	public void mouseDragged(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseMoved(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	

	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		if (arg0.getKeyCode() == KeyEvent.VK_SPACE) {
			die.rollDice();
			System.out.println("The Dice Landed On: " + die.getNum());
			int temp = die.getNum();

			for (int i = 0; i < diePics.length; i++) {
				die2[i].setX((int) (Math.random() * (900 - 100 + 1) + 100));
				die2[i].setY((int) (Math.random() * (900 - 100 + 1) + 100));
				if (die2[i].getRolled() != die.getNum()) {
					die2[i].setX(10000);
				}
			}
			
			

			// moves the blue character when it is your turn


			//sorry mr david
			
			if (blue.getSpace() / 10 % 2 == 0) {

				if (turn % 4 == 1) {
					if (blue.getSpace() <= 93) {
						for (int i = 0; i < die.getNum(); i++) {
							blue.moveRight();
							temp--;
							if (blue.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							blue.moveLeft();
						}
					}

				} else {
					if (turn % 4 == 1) {
						for (int i = 0; i < die.getNum(); i++) {
							blue.moveLeft();
							temp--;
							if (blue.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							blue.moveRight();
						}
					}
				}
			} else {
				if (turn % 4 == 1) {
					blue.moveWin(die.getNum());
				}
			}

			if (pink.getSpace() <= 93) {
				// moves the pink character when it is your turn
				if (pink.getSpace() / 10 % 2 == 0) {
					if (turn % 4 == 2) {
						for (int i = 0; i < die.getNum(); i++) {
							pink.moveRight();
							temp--;
							if (pink.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							pink.moveLeft();
						}
					}

				} else {
					if (turn % 4 == 2) {
						for (int i = 0; i < die.getNum(); i++) {
							pink.moveLeft();
							temp--;
							if (pink.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							pink.moveRight();
						}
					}
				}
			} else {
				if (turn % 4 == 2) {
					pink.moveWin(die.getNum());
				}
			}

			if (yellow.getSpace() <= 93) {
				// moves the yellow character when it is your turn
				if (yellow.getSpace() / 10 % 2 == 0) {
					if (turn % 4 == 3) {
						for (int i = 0; i < die.getNum(); i++) {
							yellow.moveRight();
							temp--;
							if (yellow.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							yellow.moveLeft();
						}
					}

				} else {
					if (turn % 4 == 3) {
						for (int i = 0; i < die.getNum(); i++) {
							yellow.moveLeft();
							temp--;
							if (yellow.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							yellow.moveRight();
						}
					}
				}
			} else {
				if (turn % 4 == 3) {
					yellow.moveWin(die.getNum());
				}
			}

			if (purple.getSpace() <= 93) {
				// move purple
				if (purple.getSpace() / 10 % 2 == 0) {
					if (turn % 4 == 0) {
						for (int i = 0; i < die.getNum(); i++) {
							purple.moveRight();
							temp--;
							if (purple.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							purple.moveLeft();
						}
					}

				} else {
					if (turn % 4 == 0) {
						for (int i = 0; i < die.getNum(); i++) {
							purple.moveLeft();
							temp--;
							if (purple.getSpace() % 10 == 0) {
								break;
							}
						}
						for (int i = 0; i < temp; i++) {
							purple.moveRight();
						}
					}
				}
			} else {
				if (turn % 4 == 0) {
					purple.moveWin(die.getNum());
				}
			}
			

			System.out.println("Blue Space:" + blue.getSpace());
			System.out.println("Pink Space:" + pink.getSpace());
			System.out.println("Yellow Space:" + yellow.getSpace());
			System.out.println("Purple Space:" + purple.getSpace());
			System.out
					.println("====================================================");
			turn++;

			for (Coordinates c : coordinates) {
				if (c.from < c.to) {
					if (c.from == blue.getSpace()) {
						for (int i = c.from; i < c.to; i++) {
							if (blue.getSpace() / 10 % 2 == 0) {
								blue.moveRight();
							} else {
								blue.moveLeft();
							}
						}
					}
					if (c.from == pink.getSpace()) {
						for (int i = c.from; i < c.to; i++) {
							if (pink.getSpace() / 10 % 2 == 0) {
								pink.moveRight();
							} else {
								pink.moveLeft();
							}
						}
					}
					if (c.from == yellow.getSpace()) {
						for (int i = c.from; i < c.to; i++) {
							if (yellow.getSpace() / 10 % 2 == 0) {
								yellow.moveRight();
							} else {
								yellow.moveLeft();
							}
						}
					}
					if (c.from == purple.getSpace()) {
						for (int i = c.from; i < c.to; i++) {
							if (purple.getSpace() / 10 % 2 == 0) {
								purple.moveRight();
							} else {
								purple.moveLeft();
							}
						}
					}
				} else {
					if (c.from == blue.getSpace()) {
						for (int i = c.from; i > c.to; i--) {
							if (blue.getSpace() / 10 % 2 == 0 && blue.getSpace()%10!=0 || blue.getSpace() / 10 % 2 == 1 && blue.getSpace()%10==0) {
								blue.moveLeftD();
							} else {
								blue.moveRightD();
							}
						}
				
					}
					if (c.from == pink.getSpace()) {
						for (int i = c.from; i > c.to; i--) {
							if (pink.getSpace() / 10 % 2 == 0 && pink.getSpace()%10!=0 || pink.getSpace() / 10 % 2 == 1 && pink.getSpace()%10==0) {
								pink.moveLeftD();
							} else {
								pink.moveRightD();
							}
						}
				
					}
					if (c.from == yellow.getSpace()) {
						for (int i = c.from; i > c.to; i--) {
							if (yellow.getSpace() / 10 % 2 == 0 && yellow.getSpace()%10!=0 || yellow.getSpace() / 10 % 2 == 1 && yellow.getSpace()%10==0) {
								yellow.moveLeftD();
							} else {
								yellow.moveRightD();
							}
						}
	
					}
					if (c.from == purple.getSpace()) {
						for (int i = c.from; i > c.to; i--) {
			 				if (purple.getSpace() / 10 % 2 == 0 && purple.getSpace()%10!=0 || purple.getSpace() / 10 % 2 == 1 && purple.getSpace()%10==0) {
								purple.moveLeftD();
							} else {
								purple.moveRightD();
							}
						}
		
					}


				}

			}

		}
		if (blue.getSpace() == 100){
			
		}
		if(pink.getSpace() == 100){
			
		}
		if(purple.getSpace() == 100){
			
		}
		if(yellow.getSpace() == 100) {
			end = new EndScreen();
			f.dispose();
		}
		update();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}
